pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  nodeSelector:
    cloud.google.com/gke-nodepool: build-pool
  tolerations:
  - key: "node.kubernetes.io/not-ready"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "ToBeDeletedByClusterAutoscaler"
    operator: "Exists"
    effect: "NoSchedule"
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: ["sleep", "infinity"]
    resources:
      requests: { memory: "1Gi", cpu: "500m" }
      limits:   { memory: "2Gi", cpu: "1000m" }
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  - name: gcloud
    image: google/cloud-sdk:latest
    command: ["sleep", "infinity"]
    resources:
      requests: { memory: "512Mi", cpu: "250m" }
      limits:   { memory: "1Gi", cpu: "500m" }
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  volumes:
  - name: workspace
    emptyDir: {}
'''
        }
    }

    environment {
        PROJECT_ID          = 'e-shop-deploy'
        REGION              = 'europe-west1'
        REPO                = 'e-shop-repo'
        TAG                 = "${BUILD_NUMBER}"
        DB_PRODUCT_NAME     = "e_shop_product_db"
        DB_USER_NAME        = "e_shop_auth_db"
        DB_CART_NAME        = "e_shop_cart_db"
        DB_TRANSACTION_NAME = "e_shop_transaction_db"
    }

    stages {
        stage('Checkout') { steps { checkout scm } }

        stage('Build & Push') {
            steps {
                container('kaniko') {
                    withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'GC_KEY')]) {
                        script {
                            def images = [
                                [df: 'e-commerce-master/Dockerfile.backend',        name: 'ecommerce-backend'],
                                [df: 'e-commerce-front-master/dockerfile.frontend', name: 'ecommerce-frontend'],
                                [df: 'recommendation-service/Dockerfile.recommendation', name: 'recommendation-api'],
                                [df: 'e-commerce-master/Dockerfile.user',          name: 'user-service',       env: [ "DB_NAME=${DB_USER_NAME}" ]],
                                [df: 'e-commerce-master/Dockerfile.product',       name: 'product-service',    env: [ "DB_NAME=${DB_PRODUCT_NAME}" ]],
                                [df: 'e-commerce-master/Dockerfile.transaction',   name: 'transaction-service', env: [ "DB_NAME=${DB_TRANSACTION_NAME}" ]]
                            ]

                            images.each { img ->
                                def envVars = img.env ? img.env.collect { k -> "--build-arg ${k}" }.join(' ') : ''
                                sh """
                                    export GOOGLE_APPLICATION_CREDENTIALS=\${GC_KEY}
                                    /kaniko/executor \\
                                      --context=. \\
                                      --dockerfile=${img.df} \\
                                      --ignore-path=node_modules \\
                                      --ignore-path=.git \\
                                      --ignore-path=*.log \\
                                      --ignore-path=coverage \\
                                      --ignore-path=dist \\
                                      --destination=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${img.name}:${TAG} \\
                                      --destination=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${img.name}:latest \\
                                      --cache=true \\
                                      --cleanup \\
                                      --verbosity=info
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                container('gcloud') {
                    withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'KEY')]) {
                        sh '''
                            gcloud auth activate-service-account --key-file="$KEY"
                            gcloud container clusters get-credentials ecommerce-cluster-v2 \
                                --zone=europe-west1-b --project=$PROJECT_ID
                            kubectl apply -f k8s/deployments/
                            kubectl apply -f k8s/services/
                        '''
                    }
                }
            }
        }
    }

    post {
        always  { echo "üßπ Cleaning up‚Ä¶" }
        success { echo "‚úÖ All images pushed to Artifact Registry and deployed." }
        failure { echo "‚ùå Check logs above." }
    }
}