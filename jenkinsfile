pipeline {
    agent {
        kubernetes {
            label 'kaniko=true'
        }
    }

    environment {
        PROJECT_ID                 = 'e-shop-deploy'
        GCR_REGISTRY               = 'gcr.io'
        BACKEND_IMAGE              = 'ecommerce-backend'
        FRONTEND_IMAGE             = 'ecommerce-frontend'
        USER_SERVICE_IMAGE         = 'user-service'
        PRODUCT_SERVICE_IMAGE      = 'product-service'
        TRANSACTION_SERVICE_IMAGE  = 'transaction-service'
        RECOMMENDATION_API_IMAGE   = 'recommendation-api'
        DOCKER_TAG                 = "${env.BUILD_NUMBER}"
        GCP_KEY                    = credentials('gcp-service-account-key')
        GCP_CREDENTIALS_ID         = 'gcp-service-account-key'
    }

    stages {
        stage('Checkout Code') {
            steps { checkout scm }
        }

        stage('Security Scan - Secrets') {
            steps {
                script {
                    echo "üîç Running secret scanning (placeholder)"
                }
            }
        }

        stage('Build Images') {
            steps {
                container('kaniko') {
                    script {
                        sh """
                            # Backend
                            /kaniko/executor \
                              --context=/home/jenkins/agent/workspace/e-shop\\ CICD \
                              --dockerfile=/home/jenkins/agent/workspace/e-shop\\ CICD/e-commerce-master/Dockerfile.backend \
                              --destination=${GCR_REGISTRY}/${PROJECT_ID}/${BACKEND_IMAGE}:${DOCKER_TAG}

                            # Frontend
                            /kaniko/executor \
                              --context=/home/jenkins/agent/workspace/e-shop\\ CICD \
                              --dockerfile=/home/jenkins/agent/workspace/e-shop\\ CICD/e-commerce-front-master/Dockerfile.frontend \
                              --destination=${GCR_REGISTRY}/${PROJECT_ID}/${FRONTEND_IMAGE}:${DOCKER_TAG}

                            # Recommendation API
                            /kaniko/executor \
                              --context=/home/jenkins/agent/workspace/e-shop\\ CICD/recommendation-service \
                              --dockerfile=/home/jenkins/agent/workspace/e-shop\\ CICD/recommendation-service/Dockerfile \
                              --destination=${GCR_REGISTRY}/${PROJECT_ID}/${RECOMMENDATION_API_IMAGE}:${DOCKER_TAG}

                            # User Service
                            /kaniko/executor \
                              --context=/home/jenkins/agent/workspace/e-shop\\ CICD \
                              --dockerfile=/home/jenkins/agent/workspace/e-shop\\ CICD/e-commerce-master/Dockerfile.user \
                              --destination=${GCR_REGISTRY}/${PROJECT_ID}/${USER_SERVICE_IMAGE}:${DOCKER_TAG}

                            # Product Service
                            /kaniko/executor \
                              --context=/home/jenkins/agent/workspace/e-shop\\ CICD \
                              --dockerfile=/home/jenkins/agent/workspace/e-shop\\ CICD/e-commerce-master/Dockerfile.product \
                              --destination=${GCR_REGISTRY}/${PROJECT_ID}/${PRODUCT_SERVICE_IMAGE}:${DOCKER_TAG}

                            # Transaction Service
                            /kaniko/executor \
                              --context=/home/jenkins/agent/workspace/e-shop\\ CICD \
                              --dockerfile=/home/jenkins/agent/workspace/e-shop\\ CICD/e-commerce-master/Dockerfile.transaction \
                              --destination=${GCR_REGISTRY}/${PROJECT_ID}/${TRANSACTION_SERVICE_IMAGE}:${DOCKER_TAG}
                        """
                    }
                }
            }
        }

        stage('Push to GCR') {
            steps {
                echo "‚úÖ Kaniko already pushed images to GCR"
            }
        }

        stage('Deploy to GKE') {
            steps {
                script {
                    withCredentials([string(credentialsId: 'gcp-service-account-key', variable: 'GCP_SA_JSON')]) {
                        sh '''
                            echo "$GCP_SA_JSON" > /tmp/gcp-key.json
                            export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcp-key.json
                            gcloud auth activate-service-account --key-file=$GOOGLE_APPLICATION_CREDENTIALS
                            gcloud container clusters get-credentials ecommerce-cluster --zone=europe-west1-b --project=$PROJECT_ID

                            echo "üöÄ Deploying Backend..."
                            kubectl set image deployment/ecommerce-backend backend=${GCR_REGISTRY}/${PROJECT_ID}/${BACKEND_IMAGE}:${DOCKER_TAG}

                            echo "üöÄ Deploying Frontend..."
                            kubectl set image deployment/ecommerce-frontend frontend=${GCR_REGISTRY}/${PROJECT_ID}/${FRONTEND_IMAGE}:${DOCKER_TAG}

                            echo "üöÄ Deploying Recommendation API..."
                            kubectl set image deployment/recommendation-api api=${GCR_REGISTRY}/${PROJECT_ID}/${RECOMMENDATION_API_IMAGE}:${DOCKER_TAG}

                            echo "üöÄ Deploying User Service..."
                            kubectl set image deployment/user-service user=${GCR_REGISTRY}/${PROJECT_ID}/${USER_SERVICE_IMAGE}:${DOCKER_TAG}

                            echo "üöÄ Deploying Product Service..."
                            kubectl set image deployment/product-service product=${GCR_REGISTRY}/${PROJECT_ID}/${PRODUCT_SERVICE_IMAGE}:${DOCKER_TAG}

                            echo "üöÄ Deploying Transaction Service..."
                            kubectl set image deployment/transaction-service transaction=${GCR_REGISTRY}/${PROJECT_ID}/${TRANSACTION_SERVICE_IMAGE}:${DOCKER_TAG}
                        '''
                    }
                }
            }
        }
    }

    post {
        always  { echo "üßπ Cleaning up‚Ä¶" }
        success { echo "‚úÖ Pipeline completed successfully!" }
        failure { echo "‚ùå Pipeline failed. Check logs." }
    }
}