pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: [sleep, infinity]
    resources:
      requests: { memory: "512Mi", cpu: "200m" }
      limits:   { memory: "1Gi",  cpu: "500m" }
    volumeMounts:
    - name: gcp-key
      mountPath: /kaniko/key.json
      readOnly: true
    - name: workspace
      mountPath: /workspace
  volumes:
  - name: gcp-key
    secret:
      secretName: gcp-service-account-key   # <-- upload this once
  - name: workspace
    emptyDir: {}
'''
        }
    }

    environment {
        PROJECT_ID = 'e-shop-deploy'
        REGISTRY   = 'gcr.io'
        TAG        = "${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps { checkout scm }
        }

        stage('Build & Push') {
            steps {
                container('kaniko') {
                    script {
                        def images = [
                            [ctx: 'e-commerce-master',       df: 'Dockerfile.backend',  name: 'ecommerce-backend'],
                            [ctx: 'e-commerce-front-master', df: 'dockerfile.frontend', name: 'ecommerce-frontend'],
                            [ctx: 'recommendation-service',  df: 'Dockerfile',          name: 'recommendation-api'],
                            [ctx: 'e-commerce-master',       df: 'Dockerfile.user',     name: 'user-service'],
                            [ctx: 'e-commerce-master',       df: 'Dockerfile.product',  name: 'product-service'],
                            [ctx: 'e-commerce-master',       df: 'Dockerfile.transaction', name: 'transaction-service']
                        ]

                        images.each { img ->
                            sh """
                                /kaniko/executor \
                                  --context=\"\$(pwd)/${img.ctx}\" \
                                  --dockerfile=\"\$(pwd)/${img.ctx}/${img.df}\" \
                                  --destination=${REGISTRY}/${PROJECT_ID}/${img.name}:${TAG} \
                                  --destination=${REGISTRY}/${PROJECT_ID}/${img.name}:latest \
                                  --cleanup --verbosity=info
                            """
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            steps {
                container('gcloud') {
                    withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'KEY')]) {
                        sh '''
                            export GOOGLE_APPLICATION_CREDENTIALS="$KEY"
                            gcloud container clusters get-credentials ecommerce-cluster --zone=europe-west1-b --project=e-shop-deploy
                            gsutil -m cp -r gs://e-shop-bucket-1/k8s/* /tmp
                            sed -i "s|:latest|:${BUILD_NUMBER}|g" /tmp/deployments/*.yaml
                            kubectl apply -f /tmp/deployments/
                            kubectl apply -f /tmp/services/
                        '''
                    }
                }
            }
        }
    }

    post {
        always { echo "üßπ Cleaning up‚Ä¶" }
        success { echo "‚úÖ All images built & deployed." }
        failure { echo "‚ùå Check logs above." }
    }
}