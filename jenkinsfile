pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  nodeSelector:
    cloud.google.com/gke-nodepool: build-pool
  tolerations:
  - key: "node.kubernetes.io/not-ready"
    operator: "Exists"
    effect: "NoSchedule"
  - key: "ToBeDeletedByClusterAutoscaler"
    operator: "Exists"
    effect: "NoSchedule"
  containers:
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: ["sleep", "infinity"]
    resources:
      requests: { memory: "1Gi", cpu: "500m" }
      limits:   { memory: "2Gi", cpu: "1000m" }
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  - name: gcloud
    image: google/cloud-sdk:latest
    command: ["sleep", "infinity"]
    resources:
      requests: { memory: "512Mi", cpu: "250m" }
      limits:   { memory: "1Gi", cpu: "500m" }
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  - name: trivy
    image: aquasec/trivy:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    - name: security-reports
      mountPath: /reports
  - name: dependency-check
    image: owasp/dependency-check:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    - name: security-reports
      mountPath: /reports
  - name: safety
    image: python:3.9-slim
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    - name: security-reports
      mountPath: /reports
  - name: zap
    image: zaproxy/zap-stable
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
    - name: security-reports
      mountPath: /zap/wrk
  - name: node-test
   image: node:18-alpine
   command: ["sleep", "infinity"]
   resources:
     requests: { memory: "1Gi", cpu: "500m" }
     limits:   { memory: "2Gi", cpu: "1000m" }
  volumeMounts:
  - name: workspace
    mountPath: /workspace
  volumes:
  - name: workspace
    emptyDir: {}
  - name: security-reports
    emptyDir: {}
'''
        }
    }

    environment {
        PROJECT_ID          = 'e-shop-deploy'
        REGION              = 'europe-west1'
        REPO                = 'e-shop-repo'
        TAG                 = "${BUILD_NUMBER}"
        DB_PRODUCT_NAME     = "e_shop_product_db"
        DB_USER_NAME        = "e_shop_auth_db"
        DB_CART_NAME        = "e_shop_cart_db"
        DB_TRANSACTION_NAME = "e_shop_transaction_db"
    }

    stages {
        stage('Checkout') { 
            steps { 
                checkout scm 
            } 
        }
        stage('Test') {
            steps {
                container('node-test') {
                sh '''
                    cd /workspace
                    npm install -g pnpm
                    pnpm install --frozen-lockfile
                    pnpm run test
                    pnpm run test:e2e
                '''
                }
            }
        }
        stage('Build & Push') {
            steps {
                container('kaniko') {
                    withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'GC_KEY')]) {
                        script {
                            def images = [
                                [df: 'e-commerce-master/Dockerfile.backend',        name: 'ecommerce-backend'],
                                [df: 'e-commerce-front-master/dockerfile.frontend', name: 'ecommerce-frontend'],
                                [df: 'recommendation-service/Dockerfile.recommendation', name: 'recommendation-api'],
                                [df: 'e-commerce-master/Dockerfile.user',          name: 'user-service',       env: [ "DB_NAME=${DB_USER_NAME}" ]],
                                [df: 'e-commerce-master/Dockerfile.product',       name: 'product-service',    env: [ "DB_NAME=${DB_PRODUCT_NAME}" ]],
                                [df: 'e-commerce-master/Dockerfile.transaction',   name: 'transaction-service', env: [ "DB_NAME=${DB_TRANSACTION_NAME}" ]]
                            ]

                            images.each { img ->
                                def envVars = img.env ? img.env.collect { k -> "--build-arg ${k}" }.join(' ') : ''
                                sh """
                                    export GOOGLE_APPLICATION_CREDENTIALS=\${GC_KEY}
                                    /kaniko/executor \\
                                      --context=. \\
                                      --dockerfile=${img.df} \\
                                      --ignore-path=node_modules \\
                                      --ignore-path=.git \\
                                      --ignore-path=*.log \\
                                      --ignore-path=coverage \\
                                      --ignore-path=dist \\
                                      --destination=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${img.name}:${TAG} \\
                                      --destination=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${img.name}:latest \\
                                      --cache=true \\
                                      --cleanup \\
                                      --verbosity=info \\
                                      ${envVars}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Security Scans') {
            parallel {
                stage('Trivy Container Scans') {
                    steps {
                        container('trivy') {
                            script {
                                def services = [
                                    'ecommerce-backend',
                                    'ecommerce-frontend', 
                                    'recommendation-api',
                                    'user-service',
                                    'product-service',
                                    'transaction-service'
                                ]

                                services.each { service ->
                                    try {
                                        echo "üîç Scanning ${service} container with Trivy..."
                                        
                                        // Display Trivy scan results directly in logs
                                        sh """
                                            echo "========================================"
                                            echo "üîç TRIVY CONTAINER SCAN: ${service}"
                                            echo "========================================"
                                            trivy image \\
                                                --format table \\
                                                --severity HIGH,CRITICAL \\
                                                --exit-code 0 \\
                                                ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${service}:${TAG}
                                            echo "========================================"
                                        """
                                        
                                        echo "‚úÖ Completed Trivy scan for ${service}"
                                    } catch (Exception e) {
                                        echo "‚ö†Ô∏è Trivy scan failed for ${service}: ${e.getMessage()}"
                                    }
                                }
                            }
                        }
                    }
                }

                stage('Filesystem Vulnerability Scans') {
                    steps {
                        script {
                            parallel([
                                'OWASP Dependency Check': {
                                    container('dependency-check') {
                                        try {
                                            echo "üîç Running OWASP Dependency Check..."
                                            
                                            // Run OWASP scan and display results
                                            sh """
                                                echo "========================================"
                                                echo "üîç OWASP DEPENDENCY CHECK SCAN"
                                                echo "========================================"
                                                /usr/share/dependency-check/bin/dependency-check.sh \\
                                                    --scan /workspace/e-commerce-master \\
                                                    --scan /workspace/e-commerce-front-master \\
                                                    --format ALL \\
                                                    --out /tmp/owasp-reports \\
                                                    --project "E-Commerce-NodeJS" \\
                                                    --failOnCVSS 7 \\
                                                    --exclude "**/*.git/**" \\
                                                    --exclude "**/node_modules/**" \\
                                                    --exclude "**/dist/**" || true
                                                
                                                echo "========================================"
                                                echo "üìä OWASP DEPENDENCY CHECK SUMMARY"
                                                echo "========================================"
                                                if [ -f /tmp/owasp-reports/dependency-check-report.txt ]; then
                                                    cat /tmp/owasp-reports/dependency-check-report.txt
                                                else
                                                    echo "No text report generated"
                                                fi
                                                echo "========================================"
                                            """
                                            
                                            echo "‚úÖ Completed OWASP Dependency Check"
                                        } catch (Exception e) {
                                            echo "‚ö†Ô∏è OWASP Dependency Check failed: ${e.getMessage()}"
                                        }
                                    }
                                },
                                'Python Safety Check': {
                                    container('safety') {
                                        try {
                                            echo "üîç Running Python Safety check..."
                                            
                                            sh """
                                                pip install safety
                                                
                                                echo "========================================"
                                                echo "üîç PYTHON SAFETY CHECK"
                                                echo "========================================"
                                                cd /workspace/recommendation-service
                                                if [ -f requirements.txt ]; then
                                                    echo "Found requirements.txt, running safety check..."
                                                    safety check -r requirements.txt || true
                                                else
                                                    echo "No requirements.txt found for Python service"
                                                fi
                                                echo "========================================"
                                            """
                                            
                                            echo "‚úÖ Completed Python Safety check"
                                        } catch (Exception e) {
                                            echo "‚ö†Ô∏è Python Safety check failed: ${e.getMessage()}"
                                        }
                                    }
                                },
                                'Trivy Filesystem Scan': {
                                    container('trivy') {
                                        try {
                                            echo "üîç Running Trivy filesystem scans..."
                                            
                                            def paths = [
                                                [path: 'e-commerce-master', name: 'backend-services'],
                                                [path: 'e-commerce-front-master', name: 'frontend'],
                                                [path: 'recommendation-service', name: 'recommendation']
                                            ]
                                            
                                            paths.each { pathInfo ->
                                                sh """
                                                    echo "========================================"
                                                    echo "üîç TRIVY FILESYSTEM SCAN: ${pathInfo.name}"
                                                    echo "========================================"
                                                    trivy fs \\
                                                        --format table \\
                                                        --severity HIGH,CRITICAL \\
                                                        --exit-code 0 \\
                                                        /workspace/${pathInfo.path}
                                                    echo "========================================"
                                                """
                                            }
                                            
                                            echo "‚úÖ Completed Trivy filesystem scans"
                                        } catch (Exception e) {
                                            echo "‚ö†Ô∏è Trivy filesystem scan failed: ${e.getMessage()}"
                                        }
                                    }
                                }
                            ])
                        }
                    }
                }
                
                stage('OWASP ZAP Security Scan') {
                    steps {
                        container('zap') {
                            script {
                                def zapTargets = [
                                    [name: 'ecommerce-backend', url: 'http://ecommerce-backend-service:80'],
                                    [name: 'user-service', url: 'http://user-service:3002'],
                                    [name: 'product-service', url: 'http://product-service:3003'],
                                    [name: 'transaction-service', url: 'http://transaction-service:3005'],
                                    [name: 'recommendation-api', url: 'http://recommendation-service:8001']
                                ]

                                zapTargets.each { target ->
                                    try {
                                        echo "üîç Running ZAP baseline scan on ${target.name}..."
                                        
                                        sh """
                                            echo "========================================"
                                            echo "üîç ZAP BASELINE SCAN: ${target.name}"
                                            echo "Target URL: ${target.url}"
                                            echo "========================================"
                                            zap-baseline.py \\
                                                -t ${target.url} \\
                                                -r /tmp/zap-${target.name}-report.html \\
                                                -w /tmp/zap-${target.name}-warnings.md \\
                                                -J /tmp/zap-${target.name}-report.json \\
                                                -I \\
                                                -d \\
                                                -T 5 || true
                                            
                                            echo "========================================"
                                            echo "üìä ZAP SCAN WARNINGS: ${target.name}"
                                            echo "========================================"
                                            if [ -f /tmp/zap-${target.name}-warnings.md ]; then
                                                cat /tmp/zap-${target.name}-warnings.md
                                            else
                                                echo "No warnings file generated"
                                            fi
                                            echo "========================================"
                                        """
                                        
                                        echo "‚úÖ Completed ZAP scan for ${target.name}"
                                    } catch (Exception e) {
                                        echo "‚ö†Ô∏è ZAP scan failed for ${target.name}: ${e.getMessage()}"
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        stage('Security Report Summary') {
            steps {
                script {
                    echo """
                    ========================================
                    üìä SECURITY SCAN SUMMARY COMPLETE
                    ========================================
                    ‚úÖ Trivy Container Scans: Complete
                    ‚úÖ Trivy Filesystem Scans: Complete  
                    ‚úÖ OWASP Dependency Check: Complete
                    ‚úÖ Python Safety Check: Complete
                    ‚úÖ OWASP ZAP Baseline Scans: Complete
                    ========================================
                    All security scan results are displayed above in the pipeline logs.
                    Review the scan outputs for any HIGH or CRITICAL vulnerabilities.
                    ========================================
                    """
                }
            }
        }

        stage('Deploy') {
            // when {
            //     expression { 
            //         return currentBuild.currentResult != 'FAILURE'
            //     }
            // }
            steps {
                container('gcloud') {
                    withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'KEY')]) {
                        sh '''
                            gcloud auth activate-service-account --key-file="$KEY"
                            gcloud container clusters get-credentials ecommerce-cluster-v2 \\
                                --zone=europe-west1-b --project=$PROJECT_ID
                            kubectl apply -f k8s/deployments/
                            kubectl apply -f k8s/services/
                        '''
                    }
                }
            }
        }
    }

    post {
        always  { 
            echo "üßπ Cleaning up‚Ä¶"
            sh 'find /tmp -name "*security*" -type f -delete 2>/dev/null || true'
            sh 'find /tmp -name "*zap*" -type f -delete 2>/dev/null || true'
            sh 'find /tmp -name "*owasp*" -type f -delete 2>/dev/null || true'
        }
        success { 
            echo "‚úÖ All images pushed to Artifact Registry and deployed."
            echo "üìä Security scan results displayed in pipeline logs above."
        }
        failure { 
            echo "‚ùå Pipeline failed. Check logs above."
            echo "üîç Review security scan results for critical vulnerabilities."
        }
        unstable {
            echo "‚ö†Ô∏è Pipeline completed with warnings. Check security scan results above."
        }
    }
}