pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  serviceAccountName: jenkins
  containers:
  - name: jnlp
    image: jenkins/inbound-agent:latest
    resources:
        requests:
            memory: "128Mi"
            cpu:    "50m"
        limits:
            memory: "512Mi"
            cpu:    "250m"
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command:
    - sleep
    args:
    - infinity
    resources:
        requests:
            memory: "512Mi"
            cpu:    "200m"
        limits:
            memory: "1Gi"
            cpu:    "500m"
    volumeMounts:
    - name: workspace-volume
      mountPath: /workspace
    - name: kaniko-secret
      mountPath: /kaniko/.docker
    workingDir: /workspace
  - name: gcloud
    image: google/cloud-sdk:latest
    command:
    - sleep
    args:
    - infinity
    resources:
        requests:
            memory: "128Mi"
            cpu:    "50m"
        limits:
            memory: "512Mi"
            cpu:    "250m"
    volumeMounts:
    - name: workspace-volume
      mountPath: /workspace
  volumes:
  - name: workspace-volume
    emptyDir: {}
  - name: kaniko-secret
    emptyDir: {}
  restartPolicy: Never
'''
        }
    }

    environment {
        PROJECT_ID                 = 'e-shop-deploy'
        // Option 1: Use GCR (legacy)
        GCR_REGISTRY               = 'gcr.io'
        // Option 2: Use Artifact Registry (recommended)
        // REGION                   = 'europe-west1'  // or your preferred region
        // AR_REGISTRY              = 'europe-west1-docker.pkg.dev'
        // REPOSITORY_NAME          = 'e-shop-repo'   // create this in AR first
        
        BACKEND_IMAGE              = 'ecommerce-backend'
        FRONTEND_IMAGE             = 'ecommerce-frontend'
        USER_SERVICE_IMAGE         = 'user-service'
        PRODUCT_SERVICE_IMAGE      = 'product-service'
        TRANSACTION_SERVICE_IMAGE  = 'transaction-service'
        RECOMMENDATION_API_IMAGE   = 'recommendation-api'
        DOCKER_TAG                 = "${env.BUILD_NUMBER}"
        GCP_KEY                    = credentials('gcp-service-account-key')
        GCP_CREDENTIALS_ID         = 'gcp-service-account-key'
    }

    stages {
        stage('Checkout Code') {
            steps { 
                checkout scm 
                script {
                    echo "‚úÖ Source code checked out successfully"
                    sh '''
                        echo "=== WORKSPACE CONTENTS ==="
                        ls -la
                        echo "=== CHECKING REQUIRED DIRECTORIES ==="
                        ls -la e-commerce-master/ || echo "‚ùå e-commerce-master not found"
                        ls -la e-commerce-front-master/ || echo "‚ùå e-commerce-front-master not found"
                        ls -la recommendation-service/ || echo "‚ùå recommendation-service not found"
                        echo "=== CHECKING DOCKERFILES ==="
                        find . -name "Dockerfile*" -type f
                        find . -name "dockerfile*" -type f
                    '''
                }
            }
        }

        stage('Security Scan - Secrets') {
            steps {
                script {
                    echo "üîç Running secret scanning (placeholder)"
                }
            }
        }     

        stage('Setup Authentication') {
            parallel {
                stage('Setup GCloud Auth') {
                    steps {
                        container('gcloud') {               
                            withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_SA_KEY')]) {
                                sh '''
                                    echo "üîß Setting up GCloud authentication..."
                                    export GOOGLE_APPLICATION_CREDENTIALS="$GCP_SA_KEY"
                                    gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
                                    
                                    # Configure Docker for both GCR and Artifact Registry
                                    gcloud auth configure-docker gcr.io --quiet
                                    # gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet  # Uncomment if using AR
                                    
                                    echo "‚úÖ GCloud authentication configured"
                                '''
                            }
                        }
                    }
                }
                
                stage('Setup Kaniko Auth') {
                    steps {
                        container('kaniko') {
                            withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_SA_KEY')]) {
                                sh '''
                                    mkdir -p /kaniko/.docker
                                    # Base-64 encode the whole JSON key
                                    ENC_KEY=$(base64 -w0 < "$GCP_SA_KEY")
                                    cat > /kaniko/.docker/config.json <<EOF
                                     {
                                      "auths": {
                                         "gcr.io":   { "auth": "$ENC_KEY" },
                                         "us.gcr.io":{ "auth": "$ENC_KEY" },
                                         "eu.gcr.io":{ "auth": "$ENC_KEY" }
                                            }
                                            }
                                            EOF
                                                                echo "‚úÖ Kaniko auth ready"
                                                            '''
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

        stage('Copy Kaniko Config') {
            steps {
                container('kaniko') {
                    sh '''
                        echo "üìã Copying Docker config to Kaniko location..."
                        mkdir -p /kaniko/.docker
                        cp /workspace/.docker/config.json /kaniko/.docker/config.json
                        ls -la /kaniko/.docker/
                        echo "‚úÖ Kaniko config ready"
                    '''
                }
            }
        }

        stage('Build Images') {
            steps {
                container('kaniko') {
                    script {
                        echo "üî® Building Docker images with Kaniko..."
                        
                        // Define build configurations
                        def buildConfigs = [
                            [
                                name: "BACKEND",
                                contextDir: "e-commerce-master",
                                dockerfile: "e-commerce-master/Dockerfile.backend",
                                image: env.BACKEND_IMAGE
                            ],
                            [
                                name: "FRONTEND", 
                                contextDir: "e-commerce-front-master",
                                dockerfile: "e-commerce-front-master/dockerfile.frontend",
                                image: env.FRONTEND_IMAGE
                            ],
                            [
                                name: "RECOMMENDATION API",
                                contextDir: "recommendation-service", 
                                dockerfile: "recommendation-service/Dockerfile",
                                image: env.RECOMMENDATION_API_IMAGE
                            ],
                            [
                                name: "USER SERVICE",
                                contextDir: "e-commerce-master",
                                dockerfile: "e-commerce-master/Dockerfile.user", 
                                image: env.USER_SERVICE_IMAGE
                            ],
                            [
                                name: "PRODUCT SERVICE",
                                contextDir: "e-commerce-master",
                                dockerfile: "e-commerce-master/Dockerfile.product",
                                image: env.PRODUCT_SERVICE_IMAGE
                            ],
                            [
                                name: "TRANSACTION SERVICE", 
                                contextDir: "e-commerce-master",
                                dockerfile: "e-commerce-master/Dockerfile.transaction",
                                image: env.TRANSACTION_SERVICE_IMAGE
                            ]
                        ]
                        
                        // Build each image
                        buildConfigs.each { config ->
                            sh """
                                echo "=== BUILDING ${config.name} IMAGE ==="
                                
                                # Check if context directory and dockerfile exist
                                if [ -d "${config.contextDir}" ] && [ -f "${config.dockerfile}" ]; then
                                    echo "‚úì Found context: ${config.contextDir}"
                                    echo "‚úì Found dockerfile: ${config.dockerfile}"
                                    
                                    # Build with Kaniko
                                    /kaniko/executor \\
                                      --context="\$(pwd)/${config.contextDir}" \\
                                      --dockerfile="\$(pwd)/${config.dockerfile}" \\
                                      --destination=${GCR_REGISTRY}/${PROJECT_ID}/${config.image}:${DOCKER_TAG} \\
                                      --destination=${GCR_REGISTRY}/${PROJECT_ID}/${config.image}:latest \\
                                      --cache=true \\
                                      --cleanup \\
                                      --verbosity=info
                                      
                                    echo "‚úÖ ${config.name} image built successfully"
                                else
                                    echo "‚ùå ${config.name}: Missing context dir or dockerfile"
                                    echo "   Context: ${config.contextDir} (exists: \$([ -d '${config.contextDir}' ] && echo 'YES' || echo 'NO'))"
                                    echo "   Dockerfile: ${config.dockerfile} (exists: \$([ -f '${config.dockerfile}' ] && echo 'YES' || echo 'NO'))"
                                    exit 1
                                fi
                                
                                echo ""
                            """
                        }
                        
                        echo "üéâ All images built successfully!"
                    }
                }
            }
        }

        stage('Verify Images') {
            steps {
                container('gcloud') {
                    withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_SA_KEY')]) {
                        sh '''
                            echo "üîç Verifying pushed images..."
                            export GOOGLE_APPLICATION_CREDENTIALS="$GCP_SA_KEY"
                            gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
                            
                            # List images in registry
                            echo "Images in registry:"
                            gcloud container images list --repository=gcr.io/$PROJECT_ID
                            
                            # Check specific image tags
                            echo "\\nImage tags for build $BUILD_NUMBER:"
                            for image in $BACKEND_IMAGE $FRONTEND_IMAGE $USER_SERVICE_IMAGE $PRODUCT_SERVICE_IMAGE $TRANSACTION_SERVICE_IMAGE $RECOMMENDATION_API_IMAGE; do
                                echo "Checking $image:$BUILD_NUMBER..."
                                gcloud container images list-tags gcr.io/$PROJECT_ID/$image --filter="tags:$BUILD_NUMBER" --format="table(digest,tags,timestamp)" || echo "‚ö†Ô∏è  Image $image:$BUILD_NUMBER not found"
                            done
                        '''
                    }
                }
            }
        }

        stage('Deploy to GKE') {
            steps {
                container('gcloud') {
                    withCredentials([file(credentialsId: 'gcp-service-account-key', variable: 'GCP_SA_KEY')]) {
                        sh '''
                            echo "üîß Setting up GCloud authentication for deployment..."
                            export GOOGLE_APPLICATION_CREDENTIALS="$GCP_SA_KEY"
                            gcloud auth activate-service-account --key-file="$GOOGLE_APPLICATION_CREDENTIALS"
                            gcloud container clusters get-credentials ecommerce-cluster --zone=europe-west1-b --project=$PROJECT_ID

                            echo "üì• Downloading Kubernetes manifests from GCS..."
                            mkdir -p /tmp/k8s-manifests/deployments
                            mkdir -p /tmp/k8s-manifests/services

                            # Download manifests with error handling
                            if gsutil -m cp -r gs://e-shop-bucket-1/k8s/deployments/* /tmp/k8s-manifests/deployments/ 2>/dev/null; then
                                echo "‚úÖ Deployments downloaded successfully"
                            else
                                echo "‚ùå Failed to download deployments from GCS"
                                exit 1
                            fi

                            if gsutil -m cp -r gs://e-shop-bucket-1/k8s/services/* /tmp/k8s-manifests/services/ 2>/dev/null; then
                                echo "‚úÖ Services downloaded successfully"
                            else
                                echo "‚ùå Failed to download services from GCS"
                                exit 1
                            fi

                            echo "üìã Downloaded manifests:"
                            find /tmp/k8s-manifests -name "*.yaml" -o -name "*.yml"

                            echo "üîÑ Updating image tags in deployments..."
                            find /tmp/k8s-manifests/deployments -name "*.yaml" -o -name "*.yml" | while read file; do
                                echo "Updating $file..."
                                sed -i "s|:latest|:${BUILD_NUMBER}|g" "$file"
                                # Also update any hardcoded image references if needed
                                sed -i "s|gcr.io/$PROJECT_ID/\\([^:]*\\):.*|gcr.io/$PROJECT_ID/\\1:${BUILD_NUMBER}|g" "$file"
                            done

                            echo "üöÄ Applying Kubernetes Deployments..."
                            if kubectl apply -f /tmp/k8s-manifests/deployments/ --validate=false; then
                                echo "‚úÖ Deployments applied successfully"
                            else
                                echo "‚ùå Failed to apply deployments"
                                kubectl get events --sort-by=.metadata.creationTimestamp
                                exit 1
                            fi

                            echo "üöÄ Applying Kubernetes Services..."
                            if kubectl apply -f /tmp/k8s-manifests/services/ --validate=false; then
                                echo "‚úÖ Services applied successfully"
                            else
                                echo "‚ùå Failed to apply services"
                                kubectl get events --sort-by=.metadata.creationTimestamp
                                exit 1
                            fi

                            echo "‚è≥ Waiting for deployments to be ready..."
                            if kubectl rollout status deployment --all --timeout=600s; then
                                echo "‚úÖ All deployments are ready!"
                            else
                                echo "‚ö†Ô∏è  Some deployments may not be ready, checking status..."
                                kubectl get deployments
                                kubectl get pods
                            fi

                            echo "üìä Final deployment status:"
                            kubectl get deployments,services,pods -o wide

                            echo "‚úÖ Deployment completed successfully!"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            echo "üßπ Cleaning up‚Ä¶"
            sh '''
                # Clean up temporary files
                rm -rf /tmp/k8s-manifests || true
                rm -rf /workspace/.docker || true
            '''
        }
        success { 
            echo "‚úÖ Pipeline completed successfully!"
            sh '''
                echo "üìã Build Summary:"
                echo "  Build Number: $BUILD_NUMBER"
                echo "  Project ID: $PROJECT_ID"
                echo "  Images built:"
                echo "    - $BACKEND_IMAGE:$BUILD_NUMBER"
                echo "    - $FRONTEND_IMAGE:$BUILD_NUMBER"
                echo "    - $USER_SERVICE_IMAGE:$BUILD_NUMBER"
                echo "    - $PRODUCT_SERVICE_IMAGE:$BUILD_NUMBER"
                echo "    - $TRANSACTION_SERVICE_IMAGE:$BUILD_NUMBER"
                echo "    - $RECOMMENDATION_API_IMAGE:$BUILD_NUMBER"
            '''
        }
        failure { 
            echo "‚ùå Pipeline failed. Check logs above for details."
            sh '''
                echo "üîç Debugging information:"
                echo "Current working directory: $(pwd)"
                echo "Available files:"
                find . -name "Dockerfile*" -o -name "dockerfile*" 2>/dev/null || echo "No Dockerfiles found"
                echo "Kaniko config:"
                ls -la /kaniko/.docker/ 2>/dev/null || echo "No Kaniko config found"
            '''
        }
    }
}