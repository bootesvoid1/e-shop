pipeline {
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
metadata:
  labels:
    app: jenkins-agent
spec:
  serviceAccountName: jenkins
  nodeSelector:
    cloud.google.com/gke-nodepool: build-pool
  tolerations:
  - key: "node.kubernetes.io/not-ready"
    operator: "Exists"
    effect: "NoSchedule"
  containers:
  # --- Jenkins agent itself (shares workspace)
  - name: jnlp
    image: jenkins/inbound-agent:alpine
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  # --- Build & push images
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  # --- Google Cloud CLI
  - name: gcloud
    image: google/cloud-sdk:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  # --- Security sidecars
  - name: trivy
    image: aquasec/trivy:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  - name: dependency-check
    image: owasp/dependency-check:latest
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  - name: safety
    image: python:3.9-slim
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  - name: node-test
    image: node:18-alpine
    command: ["sleep", "infinity"]
    volumeMounts:
    - name: workspace
      mountPath: /workspace
  volumes:
  - name: workspace
    emptyDir: {}
            '''
        }
    }

    environment {
        PROJECT_ID          = 'e-shop-deploy'
        REGION              = 'europe-west1'
        REPO                = 'e-shop-repo'
        TAG                 = "${BUILD_NUMBER}"
        DB_PRODUCT_NAME     = "e_shop_product_db"
        DB_USER_NAME        = "e_shop_auth_db"
        DB_TRANSACTION_NAME = "e_shop_transaction_db"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Debug Workspace') {
            steps {
                sh 'pwd && ls -la ${WORKSPACE}'
            }
        }

        stage('Filesystem Vulnerability Scans') {
            parallel {
                stage('OWASP Dependency Check') {
                    steps {
                        container('dependency-check') {
                            sh """
                                /usr/share/dependency-check/bin/dependency-check.sh \
                                  --scan ${WORKSPACE}/backend \
                                  --scan ${WORKSPACE}/frontend \
                                  --format ALL --out /tmp/owasp-reports \
                                  --project 'E-Shop' --failOnCVSS 7 || true
                            """
                        }
                    }
                }
                stage('Python Safety Check') {
                    steps {
                        container('safety') {
                            sh """
                                pip install safety
                                cd ${WORKSPACE}/recommendation-service
                                [ -f requirements.txt ] && safety check -r requirements.txt || echo 'No requirements.txt'
                            """
                        }
                    }
                }
                stage('Trivy FS') {
                    steps {
                        container('trivy') {
                            sh """
                                trivy fs --format table --severity HIGH,CRITICAL ${WORKSPACE}/backend
                                trivy fs --format table --severity HIGH,CRITICAL ${WORKSPACE}/frontend
                                trivy fs --format table --severity HIGH,CRITICAL ${WORKSPACE}/recommendation-service
                            """
                        }
                    }
                }
            }
        }

        stage('Test') {
            steps {
                container('node-test') {
                    sh '''
                        cd ${WORKSPACE}/backend
                        npm install -g pnpm
                        pnpm install --frozen-lockfile
                        pnpm run test
                        pnpm run test:e2e
                    '''
                }
            }
        }

        stage('Build & Push') {
            steps {
                container('kaniko') {
                    withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'GC_KEY')]) {
                        script {
                            def images = [
                                [df: 'backend/Dockerfile.backend',        name: 'ecommerce-backend'],
                                [df: 'frontend/dockerfile.frontend',      name: 'ecommerce-frontend'],
                                [df: 'recommendation-service/Dockerfile.recommendation', name: 'recommendation-api'],
                                [df: 'backend/Dockerfile.user',           name: 'user-service',       env: ["DB_NAME=${DB_USER_NAME}"]],
                                [df: 'backend/Dockerfile.product',        name: 'product-service',    env: ["DB_NAME=${DB_PRODUCT_NAME}"]],
                                [df: 'backend/Dockerfile.transaction',    name: 'transaction-service', env: ["DB_NAME=${DB_TRANSACTION_NAME}"]]
                            ]
                            images.each { img ->
                                def envVars = img.env ? img.env.collect { k -> "--build-arg ${k}" }.join(' ') : ''
                                sh """
                                    export GOOGLE_APPLICATION_CREDENTIALS=\${GC_KEY}
                                    /kaniko/executor \
                                      --context=${WORKSPACE} \
                                      --dockerfile=${img.df} \
                                      --destination=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${img.name}:${TAG} \
                                      --destination=${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${img.name}:latest \
                                      --cache=true --cleanup --verbosity=info ${envVars}
                                """
                            }
                        }
                    }
                }
            }
        }

        stage('Deploy') {
            when { expression { currentBuild.currentResult != 'FAILURE' } }
            steps {
                container('gcloud') {
                    withCredentials([file(credentialsId: 'gcp-sa-json', variable: 'KEY')]) {
                        sh '''
                            gcloud auth activate-service-account --key-file="$KEY"
                            gcloud container clusters get-credentials ecommerce-cluster-v2 \
                                --zone=europe-west1-b --project=$PROJECT_ID
                            kubectl apply -f k8s/configs/
                            kubectl apply -f k8s/deployments/
                            kubectl apply -f k8s/services/
                        '''
                    }
                }
            }
        }

        stage('Runtime Security Scans') {
            parallel {
                stage('Trivy Container Scans') {
                    steps {
                        container('trivy') {
                            script {
                                ['ecommerce-backend','ecommerce-frontend','recommendation-api',
                                 'user-service','product-service','transaction-service'].each { svc ->
                                    sh """
                                        trivy image --format table --severity HIGH,CRITICAL \
                                        ${REGION}-docker.pkg.dev/${PROJECT_ID}/${REPO}/${svc}:${TAG}
                                    """
                                }
                            }
                        }
                    }
                }
                stage('ZAP Baseline') {
                    steps {
                        container('gcloud') {
                            sh '''
                                kubectl wait --for=condition=ready pod \
                                  -l app.kubernetes.io/part-of=e-shop --timeout=120s
                            '''
                        }
                        container('zap') {
                            sh '''
                                zap-baseline.py -t http://ecommerce-backend-service:80 -I || true
                                zap-baseline.py -t http://user-service:3002 -I || true
                                zap-baseline.py -t http://product-service:3003 -I || true
                                zap-baseline.py -t http://transaction-service:3005 -I || true
                                zap-baseline.py -t http://recommendation-service:8001 -I || true
                            '''
                        }
                    }
                }
            }
        }

        stage('Security Report Summary') {
            steps {
                echo '🔍 All security scans finished – review logs above.'
            }
        }
    }

    post {
        always {
            sh 'find /tmp -name "*security*" -o -name "*zap*" -o -name "*owasp*" -type f -delete 2>/dev/null || true'
        }
        success { echo '✅ Pipeline complete.' }
        failure  { echo '❌ Pipeline failed – check logs.' }
    }
}